{
  "id": "8d0a50ce-b315-4816-bf26-82499dead5d4",
  "author": {
    "id": "91d47029-1342-449f-b4ca-a6a7d9bfd9d1",
    "account_type": "user",
    "name": "ladybugbot",
    "display_name": "info@ladybug.tools",
    "description": "Your favorite bot!",
    "picture_url": "https://avatars.githubusercontent.com/u/46136343"
  },
  "owner": {
    "id": "8c2991d1-a6e4-4275-8789-4e9405b43508",
    "account_type": "org",
    "name": "pollination",
    "display_name": "Pollination",
    "description": "...",
    "picture_url": "https://avatars.githubusercontent.com/u/46136343"
  },
  "recipe": {
    "type": "RecipeInterface",
    "annotations": {},
    "api_version": "v1beta1",
    "metadata": {
      "type": "MetaData",
      "annotations": {},
      "name": "annual-daylight",
      "tag": "0.10.20",
      "app_version": null,
      "keywords": [
        "honeybee",
        "radiance",
        "ladybug-tools",
        "daylight",
        "annual-daylight"
      ],
      "maintainers": [
        {
          "type": "Maintainer",
          "annotations": {},
          "name": "mostapha",
          "email": "mostapha@ladybug.tools"
        },
        {
          "type": "Maintainer",
          "annotations": {},
          "name": "ladybug-tools",
          "email": "info@ladybug.tools"
        }
      ],
      "home": "https://github.com/pollination/annual-daylight",
      "sources": [
        "https://hub.docker.com/r/ladybugtools/honeybee-radiance"
      ],
      "icon": "https://raw.githubusercontent.com/ladybug-tools/artwork/master/icons_components/honeybee/png/annualrecipe.png",
      "deprecated": null,
      "description": "Annual daylight recipe for Pollination.",
      "license": {
        "type": "License",
        "annotations": {},
        "name": "PolyForm Shield License 1.0.0",
        "url": "https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt"
      }
    },
    "source": null,
    "inputs": [
      {
        "type": "DAGIntegerInput",
        "annotations": {},
        "name": "cpu-count",
        "description": "The maximum number of CPUs for parallel execution. This will be used to determine the number of sensors run by each worker.",
        "default": 50,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "cpu_count",
            "description": "The maximum number of CPUs for parallel execution. For local simulation, this value is ignored and the cpu_count is automatically set to be equal to the number of workers tasked to the run. For cloud-based runs, this input can be used to control the resources used for the simulation and, if unspecified, the default value of 50 will be used.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 50,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        }
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "grid-filter",
        "description": "Text for a grid identifier or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
        "default": "*",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "grid_filter",
            "description": "Text for a grid identifier or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "*",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "grid-metrics",
        "description": "A JSON file with additional custom metrics to calculate.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "grid_metrics",
            "description": "A JSON file with custom metrics. This can also be a string or a list of grid metrics.",
            "platform": [
              "grasshopper",
              "rhino",
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.postprocess",
                "function": "grid_metrics",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "extensions": [
          "json"
        ]
      },
      {
        "type": "DAGIntegerInput",
        "annotations": {
          "__default_local__": 500
        },
        "name": "min-sensor-count",
        "description": "The minimum number of sensors in each sensor grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids.",
        "default": 1000,
        "alias": [],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        }
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "model",
        "description": "A Honeybee Model JSON file (HBJSON) or a Model pkl (HBpkl) file. This can also be a zipped version of a Radiance folder, in which case this recipe will simply unzip the file and simulate it as-is.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "HBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "model",
            "description": "This input links the model to Rhino model.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoHBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "extensions": [
          "json",
          "hbjson",
          "pkl",
          "hbpkl",
          "zip"
        ]
      },
      {
        "type": "DAGNumberInput",
        "annotations": {},
        "name": "north",
        "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be a Vector for the direction to North. (Default: 0).",
        "default": 0.0,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.north",
                "function": "north_vector_to_angle",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoNorth",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "number",
          "minimum": -360,
          "maximum": 360
        }
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "radiance-parameters",
        "description": "The radiance parameters for ray tracing.",
        "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "radiance_par",
            "description": "Text for the radiance parameters to be used for ray tracing. (Default: -ab 2 -ad 5000 -lw 2e-05).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.radiancepar",
                "function": "validate_rfluxmtx_params",
                "index": 0
              }
            ],
            "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "schedule",
        "description": "Path to an annual schedule file. Values should be 0-1 separated by new line. If not provided an 8-5 annual schedule will be created.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "schedule",
            "description": "An annual occupancy schedule, either as a path to a csv file (with 8760 rows), a Ladybug Hourly Continuous Data Collection or a HB-Energy schedule object. This can also be the identifier of a schedule in your HB-Energy schedule library. Any value in this schedule that is 0.1 or above will be considered occupied.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.schedule",
                "function": "schedule_to_csv",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "extensions": [
          "txt",
          "csv"
        ]
      },
      {
        "type": "DAGStringInput",
        "annotations": {},
        "name": "thresholds",
        "description": "A string to change the threshold for daylight autonomy and useful daylight illuminance. Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The default is -t 300 -lt 100 -ut 3000. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input.",
        "default": "-t 300 -lt 100 -ut 3000",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "thresholds",
            "description": "A string to change the threshold for daylight autonomy (DA) and useful daylight illuminance (UDI). Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input. (Default: -t 300 -lt 100 -ut 3000).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "-t 300 -lt 100 -ut 3000",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null
      },
      {
        "type": "DAGIntegerInput",
        "annotations": {},
        "name": "timestep",
        "description": "Input wea timestep.",
        "default": 1,
        "alias": [],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1,
          "maximum": 60
        }
      },
      {
        "type": "DAGFileInput",
        "annotations": {},
        "name": "wea",
        "description": "Wea file.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "wea",
            "description": "A Wea object produced from the Wea components that are under the Light Sources tab. This can also be the path to a .wea or a .epw file.",
            "platform": [
              "grasshopper",
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.wea",
                "function": "wea_handler",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "wea",
            "description": "A Wea object produced from the Wea components that are under the Light Sources tab. This can also be the path to a .wea or a .epw file.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoWeather",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "extensions": [
          "wea",
          "epw"
        ]
      }
    ],
    "outputs": [
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "cda",
        "description": "Continuous daylight autonomy results.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/cda"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "cDA",
            "description": "Continuous daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_cda_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "cDA Results",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_cda_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "da",
        "description": "Daylight autonomy results.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/da"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "DA",
            "description": "Daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_da_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "DA Results",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_da_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFileOutput",
        "annotations": {},
        "name": "grid-summary",
        "description": "Grid summary of metrics.",
        "from_": {
          "type": "FileReference",
          "annotations": {},
          "path": "grid_summary.csv"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "grid_metrics",
            "description": "CSV file with grid metrics.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_grid_metrics",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "metrics",
        "description": "Annual metrics folder.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics"
        },
        "alias": [],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "results",
        "description": "Folder with raw result files (.ill) that contain illuminance matrices for each sensor at each timestep of the analysis.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "results"
        },
        "alias": [],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "udi",
        "description": "Useful daylight illuminance results.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/udi"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "UDI",
            "description": "Useful daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "UDI Results",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "udi-lower",
        "description": "Results for the percent of time that is below the lower threshold of useful daylight illuminance.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/udi_lower"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "UDI_low",
            "description": "Values for the percent of time that is below the lower threshold of useful daylight illuminance. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "UDI low Results",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      },
      {
        "type": "DAGFolderOutput",
        "annotations": {},
        "name": "udi-upper",
        "description": "Results for the percent of time that is above the upper threshold of useful daylight illuminance.",
        "from_": {
          "type": "FolderReference",
          "annotations": {},
          "path": "metrics/udi_upper"
        },
        "alias": [
          {
            "type": "DAGGenericOutputAlias",
            "annotations": {},
            "name": "UDI_up",
            "description": "Values for the percent of time that is above the upper threshold of useful daylight illuminance. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              }
            ]
          },
          {
            "type": "DAGLinkedOutputAlias",
            "annotations": {},
            "name": "UDI up Results",
            "description": null,
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.outputs.daylight",
                "function": "read_udi_from_folder",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "LoadMeshBasedResultsToRhino",
                "index": 0
              }
            ]
          }
        ],
        "required": true
      }
    ]
  },
  "generation": 14,
  "status": {
    "type": "RunStatus",
    "annotations": {},
    "inputs": [
      {
        "type": "StepIntegerInput",
        "annotations": {},
        "name": "cpu-count",
        "description": "The maximum number of CPUs for parallel execution. This will be used to determine the number of sensors run by each worker.",
        "default": 50,
        "alias": [
          {
            "type": "DAGIntegerInputAlias",
            "annotations": {},
            "name": "cpu_count",
            "description": "The maximum number of CPUs for parallel execution. For local simulation, this value is ignored and the cpu_count is automatically set to be equal to the number of workers tasked to the run. For cloud-based runs, this input can be used to control the resources used for the simulation and, if unspecified, the default value of 50 will be used.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": 50,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        },
        "value": 50
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "grid-filter",
        "description": "Text for a grid identifier or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
        "default": "*",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "grid_filter",
            "description": "Text for a grid identifier or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "*",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "*"
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "grid-metrics",
        "description": "A JSON file with additional custom metrics to calculate.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "grid_metrics",
            "description": "A JSON file with custom metrics. This can also be a string or a list of grid metrics.",
            "platform": [
              "grasshopper",
              "rhino",
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.postprocess",
                "function": "grid_metrics",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "path": null,
        "extensions": [
          "json"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepIntegerInput",
        "annotations": {
          "__default_local__": 500
        },
        "name": "min-sensor-count",
        "description": "The minimum number of sensors in each sensor grid after redistributing the sensors based on cpu_count. This value takes precedence over the cpu_count and can be used to ensure that the parallelization does not result in generating unnecessarily small sensor grids.",
        "default": 1000,
        "alias": [],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1
        },
        "value": 1000
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "model",
        "description": "A Honeybee Model JSON file (HBJSON) or a Model pkl (HBpkl) file. This can also be a zipped version of a Radiance folder, in which case this recipe will simply unzip the file and simulate it as-is.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              },
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "HBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "model",
            "description": "This input links the model to Rhino model.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoHBModelToJSON",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "model",
            "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
            "platform": [
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.model",
                "function": "model_to_json_grid_check",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "path": null,
        "extensions": [
          "json",
          "hbjson",
          "pkl",
          "hbpkl",
          "zip"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepNumberInput",
        "annotations": {},
        "name": "north",
        "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be a Vector for the direction to North. (Default: 0).",
        "default": 0.0,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.north",
                "function": "north_vector_to_angle",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "north",
            "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoNorth",
                "index": 0
              }
            ],
            "default": "0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": {
          "type": "number",
          "minimum": -360,
          "maximum": 360
        },
        "value": 0.0
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "radiance-parameters",
        "description": "The radiance parameters for ray tracing.",
        "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "radiance_par",
            "description": "Text for the radiance parameters to be used for ray tracing. (Default: -ab 2 -ad 5000 -lw 2e-05).",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.radiancepar",
                "function": "validate_rfluxmtx_params",
                "index": 0
              }
            ],
            "default": "-ab 2 -ad 5000 -lw 2e-05 -dr 0",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "-ab 2 -ad 5000 -lw 2e-05 -dr 0"
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "schedule",
        "description": "Path to an annual schedule file. Values should be 0-1 separated by new line. If not provided an 8-5 annual schedule will be created.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "schedule",
            "description": "An annual occupancy schedule, either as a path to a csv file (with 8760 rows), a Ladybug Hourly Continuous Data Collection or a HB-Energy schedule object. This can also be the identifier of a schedule in your HB-Energy schedule library. Any value in this schedule that is 0.1 or above will be considered occupied.",
            "platform": [
              "grasshopper"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.schedule",
                "function": "schedule_to_csv",
                "index": 0
              }
            ],
            "default": null,
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "path": null,
        "extensions": [
          "txt",
          "csv"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      },
      {
        "type": "StepStringInput",
        "annotations": {},
        "name": "thresholds",
        "description": "A string to change the threshold for daylight autonomy and useful daylight illuminance. Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The default is -t 300 -lt 100 -ut 3000. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input.",
        "default": "-t 300 -lt 100 -ut 3000",
        "alias": [
          {
            "type": "DAGStringInputAlias",
            "annotations": {},
            "name": "thresholds",
            "description": "A string to change the threshold for daylight autonomy (DA) and useful daylight illuminance (UDI). Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input. (Default: -t 300 -lt 100 -ut 3000).",
            "platform": [
              "grasshopper"
            ],
            "handler": [],
            "default": "-t 300 -lt 100 -ut 3000",
            "required": false,
            "spec": null
          }
        ],
        "required": false,
        "spec": null,
        "value": "-t 300 -lt 100 -ut 3000"
      },
      {
        "type": "StepIntegerInput",
        "annotations": {},
        "name": "timestep",
        "description": "Input wea timestep.",
        "default": 1,
        "alias": [],
        "required": false,
        "spec": {
          "type": "integer",
          "minimum": 1,
          "maximum": 60
        },
        "value": 1
      },
      {
        "type": "StepFileInput",
        "annotations": {},
        "name": "wea",
        "description": "Wea file.",
        "default": null,
        "alias": [
          {
            "type": "DAGGenericInputAlias",
            "annotations": {},
            "name": "wea",
            "description": "A Wea object produced from the Wea components that are under the Light Sources tab. This can also be the path to a .wea or a .epw file.",
            "platform": [
              "grasshopper",
              "revit"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "python",
                "module": "pollination_handlers.inputs.wea",
                "function": "wea_handler",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          },
          {
            "type": "DAGLinkedInputAlias",
            "annotations": {},
            "name": "wea",
            "description": "A Wea object produced from the Wea components that are under the Light Sources tab. This can also be the path to a .wea or a .epw file.",
            "platform": [
              "rhino"
            ],
            "handler": [
              {
                "type": "IOAliasHandler",
                "annotations": {},
                "language": "csharp",
                "module": "Pollination.RhinoHandlers",
                "function": "RhinoModelProjectInfoWeather",
                "index": 0
              }
            ],
            "default": null,
            "required": true,
            "spec": null
          }
        ],
        "required": true,
        "spec": null,
        "path": null,
        "extensions": [
          "wea",
          "epw"
        ],
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "place.holder"
        }
      }
    ],
    "outputs": [
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "cda",
        "description": "Continuous daylight autonomy results.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/cda"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "da",
        "description": "Daylight autonomy results.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/da"
        }
      },
      {
        "type": "StepFileOutput",
        "annotations": {},
        "name": "grid-summary",
        "description": "Grid summary of metrics.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "grid_summary.csv"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "metrics",
        "description": "Annual metrics folder.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "results",
        "description": "Folder with raw result files (.ill) that contain illuminance matrices for each sensor at each timestep of the analysis.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "results"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "udi",
        "description": "Useful daylight illuminance results.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/udi"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "udi-lower",
        "description": "Results for the percent of time that is below the lower threshold of useful daylight illuminance.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/udi_lower"
        }
      },
      {
        "type": "StepFolderOutput",
        "annotations": {},
        "name": "udi-upper",
        "description": "Results for the percent of time that is above the upper threshold of useful daylight illuminance.",
        "path": "",
        "required": true,
        "source": {
          "type": "ProjectFolder",
          "annotations": {},
          "path": "metrics/udi_upper"
        }
      }
    ],
    "message": null,
    "started_at": "2025-07-14T19:52:37+00:00",
    "finished_at": null,
    "source": null,
    "api_version": "v1beta1",
    "id": "8d0a50ce-b315-4816-bf26-82499dead5d4_00",
    "job_id": "8d0a50ce-b315-4816-bf26-82499dead5d4",
    "entrypoint": null,
    "status": "Unknown",
    "steps": {}
  },
  "meta": {
    "resources_duration": {
      "cpu": 0,
      "memory": 0
    },
    "progress": {
      "completed": 0,
      "running": 0,
      "total": 0
    }
  },
  "name": "annual-daylight"
}